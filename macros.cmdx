! A.Mereghetti, 2021-01-19
! a file collecting MADX macros

! general aperture outside magnets
aper1=0.0; ! [m]
aper2=0.0; ! [m]
aper3=0.0; ! [m]
aper4=0.0; ! [m]
CNAO_APE: MARKER, APERTYPE=RECTANGLE, APERTURE={aper1,aper2,aper3,aper4};
! longitudinal shift of added apertures
tmpD=0.0; ! [m]

! add aperture markers upstream/downstream of a given element
! NB: aperType and aper1,aper2,aper3,aper4 and offx,offy should be defined before calling the macro;
addAperture(eleName,apeType): macro = {
   eleName, APERTYPE=apeType, APERTURE={aper1,aper2,aper3,aper4}, APER_OFFSET={offx,offy};
   eleName_EN: MARKER, APERTYPE=apeType, APERTURE={aper1,aper2,aper3,aper4}, APER_OFFSET={offx,offy};
   eleName_EX: MARKER, APERTYPE=apeType, APERTURE={aper1,aper2,aper3,aper4}, APER_OFFSET={offx,offy};
   SEQEDIT, sequence=MUXL;
   Install, element=eleName_EN, at=-0.5*eleName->L-  tmpD, from=eleName;
   Install, element=CNAO_APE  , at=-0.5*eleName->L-2*tmpD, from=eleName;
   Install, element=CNAO_APE  , at= 0.5*eleName->L+2*tmpD, from=eleName;
   Install, element=eleName_EX, at= 0.5*eleName->L+  tmpD, from=eleName;
   ENDEDIT;
};

! save a .tfs file with linear optics functions in a specific column order
! please specify if the sequence is in thin or thick lens (is_thin<>0).
! in case of an open line (e.g. a transfer line, the gantry, etc...), use
!    initial conditions to linear optics functions (flagged as initial).
saveOpticsTFS(fileName): macro = {
   select,flag=twiss,clear;
   select,flag=twiss,column=name,keyword,l,s,betx,alfx,bety,alfy,x,px,y,py,dx,dpx,dy,dpy,mux,muy;
   if (is_open<>0) {
      ! a transfer line: we need the initial conditions
      if (is_thin>0) {
         twiss, rmatrix=true, file=fileName_optics_thin.tfs, beta0=initial;
      } else {
         twiss, rmatrix=true, file=fileName_optics.tfs, beta0=initial;
      };
   } else {
      ! a ring: optics is computed as self-consisten solution
      if (is_thin>0) {
         twiss, rmatrix=true, file=fileName_optics_thin.tfs;
      } else {
         twiss, rmatrix=true, file=fileName_optics.tfs;
      };
   };
};

! save a .tfs file with geometry infos (strengths, aperture, etc...) in a specific column order
! please specify if the sequence is in thin or thick lens (is_thin<>0).
! in case of an open line (e.g. a transfer line, the gantry, etc...), use
!    initial conditions to linear optics functions (flagged as initial).
saveGeometryTFS(fileName): macro = {
   select,flag=twiss,clear;
   select,flag=twiss,column=name,keyword,l,s,kick,hkick,vkick,angle,k0l,k1l,k2l,apertype,aper_1,aper_2,aper_3,aper_4,apoff_1,apoff_2;
   if (is_open<>0) {
      ! a transfer line: we need the initial conditions
      if (is_thin>0) {
         twiss, rmatrix=true, file=fileName_geometry_thin.tfs, beta0=initial;
      } else {
         twiss, rmatrix=true, file=fileName_geometry.tfs, beta0=initial;
      };
   } else {
      ! a ring: optics is computed as self-consisten solution
      if (is_thin>0) {
         twiss, rmatrix=true, file=fileName_geometry_thin.tfs;
      } else {
         twiss, rmatrix=true, file=fileName_geometry.tfs;
      };
   };
};

! save an apic.txt file
! please specify if the sequence is in thin or thick lens (is_thin<>0).
! in case of an open line (e.g. a transfer line, the gantry, etc...), use
!    initial conditions to linear optics functions (flagged as initial).
saveAPIC(): macro = {
   select,flag=twiss,clear;
   select,flag=twiss,COLUMN=NAME, KEYWORD, L, TILT, ANGLE, E1, E2, K1L, K2L, K3L, KS;
   if (is_open<>0) {
      ! a transfer line: we need the initial conditions
      twiss, rmatrix=true, file=apic.txt, beta0=initial;
   } else {
      ! a ring: optics is computed as self-consisten solution
      twiss, rmatrix=true, file=apic.txt;
   };
};

! set beam rigidity and other realtivistic quantities based on beam energy
setRigidity(): macro = {
   ! input:
   ! - Ek [MeV/n]: kinetic energy per nucleon;
   ! - A0,Z0 []: nuclear mass, atomic number;
   ! - m0 [MeV]: rest mass;
   gammaRel=(Ek*A0)/m0+1;
   betaGammaRel=sqrt(gammaRel^2-1);
   betaRel=betaGammaRel/gammaRel;
   Brho=betaGammaRel*m0/(CLIGHT*1E-6*Z0);
   ! value, Ek, A0, m0, gammaRel, betaGammaRel, betaRel, Brho;
};

setBeam(mySequence): macro = {
   ! AM: set crazy energies, otherwise dispersion will be divided by beta_rel...
   beam, particle=proton, energy=1000, sequence=mySequence;
   
   if ( is_carbon == 0 ) {
     ! properties of protons
     A0=1;         ! []
     Z0=1;         ! []
     m0=PMASS*1E3; ! [MeV]
     ! m0=938.255; ! rampGen [MeV]
   } else {
     ! protperties of carbon ions
     A0=12;           ! []
     Z0=6;            ! []
     m0=A0*NMASS*1E3; ! [MeV]
   };
};

! save Rmatrix at specific element
! NB: please remember to use and twiss your sequence beforehand, e.g.:
!     use, sequence=gantry;
!     twiss, table=twiss, rmatrix=true, beta0=initial; 
save_RMatrix(eleName): macro = {
  REMOVEFILE, FILE="Rmatrix.txt";
  assign, echo="Rmatrix.txt";
  PRINTF, TEXT="#  | % 23.0f % 23.0f % 23.0f % 23.0f % 23.0f % 23.0f", VALUE=1,2,3,4,5,6;
  PRINTF, TEXT="#--|------------------------------------------------------------------------------------------------------------------------------------------------", VALUE=0;
  n=1;
  WHILE (n<=6) {
    exec, save_RMatrix_iLine(eleName,$n);
    n=n+1;
  };
  assign, echo=terminal;
};

save_RMatrix_iLine(eleName,iLine): macro = {
  PRINTF, TEXT="%2.0f | % 23.16E % 23.16E % 23.16E % 23.16E % 23.16E % 23.16E",
      VALUE=iLine,table(twiss,eleName,reiLine1),table(twiss,eleName,reiLine2),table(twiss,eleName,reiLine3),
                  table(twiss,eleName,reiLine4),table(twiss,eleName,reiLine5),table(twiss,eleName,reiLine6);
};

show_kIVals_element(eleName): macro = {
  tmpK0=eleName->ANGLE/eleName->L;
  PRINTF, TEXT=eleName % 24.16E % 24.16E % 24.16E % 24.16E, VALUE=tmpK0,tmpK0*Brho,eleName->K1,eleName->K1*Brho;
};

save_strengths(fileName): macro = {
   REMOVEFILE, FILE=fileName.str;
   assign, echo=filename.str;
   print, TEXT="! general infos:";
   print, TEXT="! - kinetick energy [MeV/n]";
   print, TEXT="! - Range [mm]";
   value, Ek;
   value, Bp;
   exec, save_strengths_particular();
   assign, echo=terminal;
};
